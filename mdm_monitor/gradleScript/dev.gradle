dependencies {



    try {
        api project(':adhoc_util_time')
    } catch (Exception ignored) {
        api("com.nd.android.adhoc.basic:adhoc_util_time:$adhoc_basic_version")
    }


    api("com.nd.sdp.adhoc:screen-capture:$screen_capture_version") {
        exclude group: 'com.nd.sdp.adhoc', module: 'adhoc-sdk'
    }

    compile("com.nd.sdp.adhoc:adhoc-sdk:$adhoc_sdk_version")

    try{
        api project(':adhoc_wifi:wifi_sdk')
    }catch (Exception ignored){
        api ("com.nd.android.mdm.biz:wifi_sdk:$mdm_biz_version")
    }

    try {
        api project(':adhoc_communicate')
    } catch (Exception ignored) {
        api("com.nd.android.mdm.biz:adhoc_communicate:$mdm_biz_version") {
            exclude group: 'com.nd.android.mdm.biz', module: 'mdm_biz_common'
            exclude group: 'com.nd.android.mdm.biz', module: 'mdm_env'
        }
    }

    try {
        api project(':assistant_sdk')
    } catch (Exception ignored) {
        api("com.nd.android.mdm.biz:assistant_sdk:$mdm_biz_version") {
        }
    }

    api("com.nd.android.adhoc:adhoc_basic_control:$device_control_version")

    api("com.nd.android.adhoc:device_command_basic:$device_command_version") {
        exclude group: 'com.nd.android.mdm.biz', module: 'adhoc_communicate'
        exclude group: 'com.nd.android.mdm.biz', module: 'mdm_env'
        exclude group: 'com.nd.android.mdm.biz', module: 'assistant_sdk'
    }


    try{
        api project(':location_api')
    }catch (Exception ignored){
        api("com.nd.android.adhoc:location_api:$location_verison")
    }


    try {
        api project(':adhoc_basic_frame')
    } catch (Exception ignored) {
        api("com.nd.android.adhoc.basic:adhoc_basic_frame:$adhoc_basic_version"){
            exclude group: 'com.nd.android.adhoc.basic', module: 'adhoc_basic_ui'
        }
    }

    try {
        api project(':adhoc_basic_ui')
    } catch (Exception ignored) {
        api("com.nd.android.adhoc.basic:adhoc_basic_ui:$adhoc_basic_version")
    }



    api("com.nd.sdp.android.serviceloader:service-loader:$service_loader_version")
    api("com.nd.sdp.android.serviceloader:service-loader-annotation:$service_loader_version")
    annotationProcessor("com.nd.sdp.android.serviceloader:service-loader-compiler:$service_loader_version")

}


configurations {
    all*.exclude group: 'android.support'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name

        }
    }
    compile.extendsFrom provided
}